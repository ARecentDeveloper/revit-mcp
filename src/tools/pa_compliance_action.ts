import { z } from "zod";
import { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";
import { withRevitConnection } from "../utils/ConnectionManager.js";

export function registerPAComplianceActionTool(server: McpServer) {
  server.tool(
    "pa_compliance_action",
    "Execute PA (Port Authority) compliance corrections based on a reviewed Excel file generated by the pa_compliance_report tool. This tool reads the Excel file, processes user-modified suggested names, and performs automated corrections including family renaming, workset renaming, sheet renaming, and element recategorization. Supports step-by-step execution, dry-run mode for previewing changes, and comprehensive error handling with detailed logging.",
    {
      data: z.object({
        excelFilePath: z
          .string()
          .describe("Full path to the Excel file containing compliance corrections (e.g., 'C:\\Reports\\PA_Compliance_Report.xlsx'). This should be the file generated by pa_compliance_report tool and reviewed/modified by the user."),
        step: z
          .enum(["families", "worksets", "sheets", "integrity", "all"])
          .default("all")
          .describe("Execution step for incremental corrections: 'families' = process annotation and model family corrections only, 'worksets' = process workset corrections only, 'sheets' = process sheet corrections only, 'integrity' = process model integrity corrections only, 'all' = process all corrections."),
        dryRun: z
          .boolean()
          .default(false)
          .describe("When true, preview changes without applying them. Shows what would be changed without modifying the Revit project. Useful for validating corrections before execution."),
        backupProject: z
          .boolean()
          .default(false)
          .describe("When true, creates a backup of the current project before applying changes. Recommended for safety when making bulk modifications."),
        continueOnError: z
          .boolean()
          .default(true)
          .describe("When true, continues processing remaining items if individual operations fail. When false, stops execution on first error. Recommended to keep true for batch operations."),
        updateExcelStatus: z
          .boolean()
          .default(true)
          .describe("When true, updates the Excel file with operation results (success/failure status for each item). Provides detailed feedback on what was processed."),
      })
        .describe("Configuration parameters for PA compliance action execution. The tool processes corrections from an Excel file generated by the pa_compliance_report tool, applying user-reviewed naming and categorization changes to the Revit project."),
    },
    async (args, extra) => {
      const params = args.data;

      try {
        const response = await withRevitConnection(async (revitClient) => {
          return await revitClient.sendCommand(
            "pa_compliance_action",
            params
          );
        });

        if (response.success) {
          let resultText = "";
          
          if (params.dryRun) {
            resultText += `PA Compliance Action - Dry Run Results\n\n`;
            resultText += "The following changes would be applied:\n\n";
          } else {
            resultText += `PA Compliance Action completed successfully!\n\n`;
          }

          if (response.summary) {
            resultText += "Execution Summary:\n";
            
            if (response.summary.familiesProcessed !== undefined) {
              const status = params.dryRun ? "would be processed" : "processed";
              resultText += `- Families: ${response.summary.familiesProcessed} ${status}`;
              if (response.summary.familiesSucceeded !== undefined) {
                resultText += ` (${response.summary.familiesSucceeded} succeeded`;
                if (response.summary.familiesFailed !== undefined) {
                  resultText += `, ${response.summary.familiesFailed} failed`;
                }
                resultText += ")";
              }
              resultText += "\n";
            }
            
            if (response.summary.worksetsProcessed !== undefined) {
              const status = params.dryRun ? "would be processed" : "processed";
              resultText += `- Worksets: ${response.summary.worksetsProcessed} ${status}`;
              if (response.summary.worksetsSucceeded !== undefined) {
                resultText += ` (${response.summary.worksetsSucceeded} succeeded`;
                if (response.summary.worksetsFailed !== undefined) {
                  resultText += `, ${response.summary.worksetsFailed} failed`;
                }
                resultText += ")";
              }
              resultText += "\n";
            }
            
            if (response.summary.sheetsProcessed !== undefined) {
              const status = params.dryRun ? "would be processed" : "processed";
              resultText += `- Sheets: ${response.summary.sheetsProcessed} ${status}`;
              if (response.summary.sheetsSucceeded !== undefined) {
                resultText += ` (${response.summary.sheetsSucceeded} succeeded`;
                if (response.summary.sheetsFailed !== undefined) {
                  resultText += `, ${response.summary.sheetsFailed} failed`;
                }
                resultText += ")";
              }
              resultText += "\n";
            }
            
            if (response.summary.integrityIssuesProcessed !== undefined) {
              const status = params.dryRun ? "would be processed" : "processed";
              resultText += `- Model Integrity Issues: ${response.summary.integrityIssuesProcessed} ${status}`;
              if (response.summary.integrityIssuesSucceeded !== undefined) {
                resultText += ` (${response.summary.integrityIssuesSucceeded} succeeded`;
                if (response.summary.integrityIssuesFailed !== undefined) {
                  resultText += `, ${response.summary.integrityIssuesFailed} failed`;
                }
                resultText += ")";
              }
              resultText += "\n";
            }
          }

          if (response.step && response.step !== "all") {
            resultText += `\nStep executed: ${response.step}\n`;
          }

          if (response.backupPath && !params.dryRun) {
            resultText += `\nProject backup created: ${response.backupPath}\n`;
          }

          if (response.updatedExcelPath && params.updateExcelStatus && !params.dryRun) {
            resultText += `Excel file updated with results: ${response.updatedExcelPath}\n`;
          }

          if (response.errors && response.errors.length > 0) {
            resultText += "\nErrors encountered:\n";
            response.errors.forEach((error: string) => {
              resultText += `- ${error}\n`;
            });
          }

          if (response.warnings && response.warnings.length > 0) {
            resultText += "\nWarnings:\n";
            response.warnings.forEach((warning: string) => {
              resultText += `- ${warning}\n`;
            });
          }

          if (params.dryRun) {
            resultText += "\nNo changes were applied. Run again with dryRun=false to execute the changes.\n";
          } else if (response.summary) {
            const totalProcessed = (response.summary.familiesProcessed || 0) + 
                                 (response.summary.worksetsProcessed || 0) + 
                                 (response.summary.sheetsProcessed || 0) + 
                                 (response.summary.integrityIssuesProcessed || 0);
            if (totalProcessed > 0) {
              resultText += "\nPA compliance corrections have been applied to your Revit project.\n";
            }
          }

          return {
            content: [
              {
                type: "text",
                text: resultText,
              },
            ],
          };
        } else {
          return {
            content: [
              {
                type: "text",
                text: `PA compliance action failed: ${response.message || 'Unknown error occurred'}`,
              },
            ],
          };
        }
      } catch (error) {
        return {
          content: [
            {
              type: "text",
              text: `PA compliance action failed: ${
                error instanceof Error ? error.message : String(error)
              }`,
            },
          ],
        };
      }
    }
  );
}